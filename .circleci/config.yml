version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/golang:1.10

    working_directory: /go/src/github.com/Ankr-network/dccn-gateway

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Copy ssh key in the circleci build context
          command: |
            cp ${HOME}/.ssh/id_rsa id_rsa
      - run:
          name: Install AWSCLI
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: Install Kops and Kubectl
          command: |
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: "Build & Push Docker Image for gateway"
          command: |
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            DATE=`date +%Y%m%d%H%M%S`
            URL_BRANCH=""
            if [[ ($BRANCH_NAME == "develop") ]]
            then
              BRANCH_NAME="dev"
              URL_BRANCH="client-stage.dccn.ankr.com:50051"
              K8S_CLUSTER="stage.hub"
            elif [[ ($BRANCH_NAME == "master") ]]
            then
              BRANCH_NAME="stage"
              URL_BRANCH="client.dccn.ankr.com:50051"
              K8S_CLUSTER="hub"
            else
              BRANCH_NAME="feat"
              URL_BRANCH="client-dev.dccn.ankr.com:50051"
              K8S_CLUSTER="dev.hub"
            fi
            DOCKER_NAME="dccn-gateway"
            dep ensure --vendor-only
            docker build --build-arg URL_BRANCH=${URL_BRANCH} --no-cache -f Dockerfile -t $DOCKER_NAME:$BRANCH_NAME .
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag $DOCKER_NAME:$BRANCH_NAME 815280425737.dkr.ecr.us-west-2.amazonaws.com/dccn-gateway:$TAG
              docker push 815280425737.dkr.ecr.us-west-2.amazonaws.com/dccn-gateway:$TAG
            done
            kops export kubecfg --name ${K8S_CLUSTER}.k8s.ankr.network --state s3://kops.${K8S_CLUSTER}.config
            kubectl set image app-dccn-gateway=${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/dccn-gateway:${BRANCH_NAME}${DATE} \
            --local -f ./k8s/dccn-gateway.yml -o yaml > ./k8s/dccn-gateway-patch.yml
            kubectl apply -f ./k8s/dccn-gateway-patch.yml
            if ! kubectl rollout status deploy/gateway --watch=true --timeout=120s; then
              echo "Deploy failed, roll back to previous version"
              kubectl rollout undo deploy/gateway
              exit 1
            fi
  test:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Install
          command: npm install
      - run:
          name: Install
          command: npm install commander
      - run:
          name: Install
          command: npm install --save-dev mocha
      - run:
          name: userTest
          command: npm start
      - run:
          name: AppTest
          command: npm test


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build